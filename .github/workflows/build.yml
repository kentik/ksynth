name: build

on:
  push:
    branches: "*"
    tags: "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  build:
    runs-on: ${{ matrix.builder }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            builder: ubuntu-latest
            cross: true
          # FIXME: uncomment
          # - target: x86_64-apple-darwin
          #   builder: macos-latest
          #   cross: false
          - target: aarch64-unknown-linux-musl
            builder: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-musleabihf
            builder: ubuntu-latest
            cross: true
    continue-on-error: ${{ startsWith(matrix.builder, 'macos') }}
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: beta
          target: ${{ matrix.target }}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker/build-push-action@v2
        with:
          context: .github/workflows
          file: .github/workflows/Dockerfile.${{ matrix.target }}
          tags: local/cross:${{ matrix.target }}
          push: false
        if: ${{ matrix.cross }}
      - run: brew install capnp
        if: ${{ startsWith(matrix.builder, 'macos') }}
      - id: cargo-args
        run: .github/scripts/cargo-args
      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }} ${{ steps.cargo-args.outputs.args }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ env.BINARY }}
          retention-days: 2

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v1
      - uses: docker/setup-qemu-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY }}-aarch64-unknown-linux-musl
          path: binary/arm64
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY }}-armv7-unknown-linux-musleabihf
          path: binary/armv7
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY }}-x86_64-unknown-linux-musl
          path: binary/amd64
      - uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          tags: ${{ github.repository }}:${{ github.sha }}
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
    needs: build

  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: version
        run: |
          VERSION=$(git describe --always --tags)
          echo ::set-output name=version::$VERSION

  package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [deb, rpm]
        target:
          - name: aarch64-unknown-linux-musl
            arch: aarch64
          - name: armv7-unknown-linux-musleabihf
            arch: armv7
          - name: x86_64-unknown-linux-musl
            arch: x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY }}-${{ matrix.target.name }}
      - id: package
        uses: kentik/pkg@master
        with:
          name: ${{ github.event.repository.name }}
          version: ${{ needs.version.outputs.version }}
          arch: ${{ matrix.target.arch }}
          format: ${{ matrix.format }}
          package: package.yml
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.package }}
          path: ${{ steps.package.outputs.package }}
          retention-days: 2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - run: |
          PACKAGE=${{ steps.package.outputs.package }}
          VERSION=${{ needs.version.outputs.version }}
          aws s3 cp $PACKAGE $BUCKET/$VERSION/
    needs: [build, version]

  binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.BINARY }}-${{ matrix.target }}
      - run: |
          aws s3 cp $BINARY $BUCKET/$BINARY-${{ matrix.target }}
    needs: build

  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: create
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: ${{ contains(github.ref, '-rc') }}
          body_path: .github/release-body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: [binaries, package]
    if: startsWith(github.ref, 'refs/tags')

env:
  BINARY: ${{ github.event.repository.name }}
  BUCKET: s3://kentik-github-actions/${{ github.repository }}/${{ github.sha }}
