name: publish

on:
  release:
    types: [edited]

jobs:
  control:
    runs-on: ubuntu-latest
    outputs:
      actions: ${{ steps.control.outputs.actions }}
    steps:
      - id: control
        uses: kentik/actions/control@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - id: version
        run: |
          aws s3 cp $BUCKET/ksynth-x86_64-unknown-linux-musl ksynth
          chmod u+x ksynth
          VERSION=$(./ksynth -V | cut -d ' ' -f 2)
          echo ::set-output name=version::$VERSION

  artifacts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - x86_64-unknown-freebsd
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - run: |
          aws s3 cp $BUCKET/$BINARY-${{ matrix.target }} .
      - run: "file *"
      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BINARY }}-${{ matrix.target }}
          asset_name: ${{ env.BINARY }}-${{ matrix.target }}
          asset_content_type: application/binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: [control]
    if: contains(needs.control.outputs.actions, 'publish-artifacts')

  shasums:
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - run: |
          aws s3 cp $BUCKET/sha512.txt .
      - uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: sha512.txt
          asset_name: sha512.txt
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: [control]
    if: contains(needs.control.outputs.actions, 'publish-artifacts')

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v1
      - uses: docker/setup-qemu-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - run: |
          aws s3 cp $BUCKET/$BINARY-aarch64-unknown-linux-musl     binary/arm64/$BINARY
          aws s3 cp $BUCKET/$BINARY-armv7-unknown-linux-musleabihf binary/armv7/$BINARY
          aws s3 cp $BUCKET/$BINARY-x86_64-unknown-linux-musl      binary/amd64/$BINARY
      - uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          tags: ${{ github.repository }}:${{ needs.version.outputs.version }}
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
      - uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          tags: ${{ github.repository }}:latest
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
        if: github.event.release.prerelease == false
    needs: [control, version]
    if: contains(needs.control.outputs.actions, 'publish-images')

  packages:
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - id: package-names
        run: |
          BUCKET=$BUCKET/${{ needs.version.outputs.version }}
          aws s3 cp $BUCKET . --include "*.deb" --include "*.rpm" --recursive
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6
      - run: |
          gem install package_cloud
      - run: |
          case "${{ github.event.release.prerelease || false }}" in
                  true) REPO="${{ github.event.repository.name }}-dev" ;;
                 false) REPO="${{ github.event.repository.name }}"     ;;
          esac

          for deb in *.deb; do
              package_cloud push kentik/$REPO/debian/jessie   $deb
              package_cloud push kentik/$REPO/debian/stretch  $deb
              package_cloud push kentik/$REPO/debian/buster   $deb
              package_cloud push kentik/$REPO/debian/bullseye $deb

              package_cloud push kentik/$REPO/ubuntu/focal    $deb
              package_cloud push kentik/$REPO/ubuntu/bionic   $deb
              package_cloud push kentik/$REPO/ubuntu/jammy    $deb
          done

          for rpm in *.rpm; do
              package_cloud push kentik/$REPO/el/7 $rpm
              package_cloud push kentik/$REPO/el/8 $rpm
              package_cloud push kentik/$REPO/el/9 $rpm
          done
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
    needs: [control, version]
    if: contains(needs.control.outputs.actions, 'publish-packages')

  notarize:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            arch: x86_64
          - target: aarch64-unknown-linux-musl
            arch: aarch64
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - run: |
          aws s3 cp $BUCKET/${{ env.BINARY }}-${{ matrix.target }} ${{ env.BINARY }}
      - uses: kentik/actions/notary/submit@master
        with:
          name: ${{ github.event.repository.name }}
          version: ${{ needs.version.outputs.version }}
          arch: ${{ matrix.arch  }}
          system: linux
          artifact: /github/workspace/${{ env.BINARY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
    needs: [control, version]
    if: contains(needs.control.outputs.actions, 'notarize-update') && !github.event.release.prerelease

  release-update:
    runs-on: ubuntu-latest
    steps:
      - uses: kentik/actions/notary/release@master
        with:
          name: ${{ github.event.repository.name }}
          version: ${{ github.event.release.tag_name }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
    needs: control
    if: contains(needs.control.outputs.actions, 'release-update')


env:
  BINARY: ${{ github.event.repository.name }}
  BUCKET: s3://kentik-github-actions/${{ github.repository }}/${{ github.sha }}
